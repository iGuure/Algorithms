/*

	动态规划的思想：将一个复杂的问题划分成很多有关联的小问题

	这道题的题目是：分别有1,3,5元面值的硬币，问最少用多少个硬币可以凑成11元？

	这道题可以划分成一个抽象问题：最少用x个硬币可以凑成N元（N < 11）？即F(N) = x

	可以从最简单的开始，凑成0元，显然最少用0个硬币，即F(0) = 0

	然后，凑成1元，我们需要找出和F(0)的关系：在这里，我们可以遍历硬币的面值

	如果其中有的面值小于或等于N，我们可以将该面值减去N，如1 - 1 = 0

	再求出F(余下的元)，如F(0) = 0

	这时，我们相当于用了一个新的硬币，加上余下的元最少使用的硬币数，求出了这种情况下使用的硬币数

	即1 + F(1 - 1) = 1 + F(0) = 1

	此时，判断这种情况下使用的硬币数是不是最少的（与使用其他硬币的情况相比），如果是，就把这个值记录下来

	凑成2元以及之后的情况和这个相同，不再赘述

	注意：清楚函数值F(N)的具体定义，清楚推导公式的科学性

*/
public class Coin {
	public static void main(String[] args) {
		/* 创建函数值的数组 */
		int[] min = new int[100];
		for (int i = 0; i < min.length; i++) {
			/* 设置值为无限大，方便之后使用 */
			min[i] = Integer.MAX_VALUE;
		}
		min[0] = 0;

		/* 3种面值的硬币 */
		int[] coin = new int[3];
		coin[0] = 1;
		coin[1] = 3;
		coin[2] = 5;


		for (int i = 1; i < min.length; i++) {
			for (int j = 0; j < coin.length; j++) {
				/* 
					如果存在小于总元数的硬币，那么可以试着用这个硬币
					如果F(总元数 - 该硬币的面值) + 1小于当前F(总元数)，说明这种方案使用硬币数更少
					因此必须用该值替换当前值
				*/
				if (coin[j] <= i && min[i - coin[j]] + 1 < min[i])
					min[i] = min[i - coin[j]] + 1;
			}
		}

		for (int i = 0; i < min.length; i++) {
			System.out.println(i + " " + min[i]);
		}
	}
}